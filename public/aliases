# point to the latest of a branch
# git fetch && git reset origin/[branch] --hard

# or to overwrite local with latest of a branch
# git fetch origin [branch]:[branch] --force

# vim plugin manager
#  clone --depth 1 https://github.com/wbthomason/packer.nvim\
# ~/.local/share/nvim/site/pack/packer/start/packer.nvim

# put local aliases here
if [ -f ./aliases.local]; then
    source ./aliases.local
fi

# Setup
alias runsetup="bash $DOTFILES_PATH/setup.sh"

# Exercism 
alias exjs='exercism submit "$(basename $PWD).js"'
alias exs='exercism submit'

# Git
grecent="git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format='%(refname:short)'"
alias lg="lazygit"

# System
alias ..='cd ..'
alias ...='cd -'

# Package Managers
alias brewup='brew update && brew upgrade && brew cleanup && brew doctor'

# Set defualt branch to main vs master $DEFAULT_BRANCH
alias gdmain="export DEFAULT_BRANCH='main' && echo Switched default: $DEFAULT_BRANCH"
alias gdmaster="export DEFAULT_BRANCH='master' && echo Switched default: $DEFAULT_BRANCH"

## default branch when starting up is main
export DEFAULT_BRANCH='main'

# vscode wireup
function code {
    if [[ $# = 0 ]]
    then
        open -a "Visual Studio Code"
    else
        local argPath="$1"
        [[ $1 = /* ]] && argPath="$1" || argPath="$PWD/${1#./}"
        open -a "Visual Studio Code" "$argPath"
    fi
}

alias dot='godot && nvim $DOTFILES_PATH'
alias godot="cd $DOTFILES_PATH"
alias go='cd $(find . -maxdepth 3 -type d | fzf)'
alias gg="cd ~/git"
alias pulldot="cd $DOTFILES_PATH && git pull && git status && cd -"
alias packs='cd ~/.local/share/nvim/site/pack/packer/'
alias scr='cd ~/git/scratch && nvim scratchpad.md'
alias alss='nvim ~/.aliases'
alias sess='nvim ~/.config/kitty/startup_session'
alias dotn='nvim ~/.config/nvim/lua/duhl'
alias dotg='nvim ~/.config/ghostty/config'
alias reload='source ~/.aliases'

alias wat='alias'

alias c='code .'

# alias pubExt='rm -rf $HOME/.vscode/extensions/vs-code-extensions && cp -R ~/git/vs-code-extensions $HOME/.vscode/extensions'

# deploy
alias gri='git branch --set-upstream-to=origin/$DEFAULT_BRANCH && git rebase -i'
alias gri='git rebase -i origin/$DEFAULT_BRANCH'
alias gprm='git pull --rebase origin $DEFAULT_BRANCH'

# git
alias reload!='. ~/.zshrc && . ~/.zshrc.local'

alias gwho='git shortlog -n -s --no-merges'

alias gc='git checkout'
alias gcb='git checkout -b'
alias gcc='git checkout $(git branch | fzf)'
#logging
alias glm='git log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --committer="duhl"'
alias gl="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
alias glh='git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short'
alias gla="git log --graph --decorate --oneline --all"
# committing
alias ga='git add -A'
alias gcin='git add -A && git commit -m'
# alias gcin='git commit -am'
# alias gci='git add -A && git commit -n'
alias gcamend='git add -A && git commit --amend'
alias guc='git reset --soft HEAD~1'
# use git restore ./file to reset on or more files back
alias gup='setUpstreamBranch'
alias gremove='git reset HEAD && git status'
# get latest master on local master without checking out master
alias gfm='git fetch --prune origin $DEFAULT_BRANCH:$DEFAULT_BRANCH'
alias gmm='git merge $DEFAULT_BRANCH --no-edit'

# USE `grm` instead!
# alias gpm='gfm && gmm'
# alias gpmm='git prune && rm .git/gc.log && gpm'

# !!DANGER!! will lose changes
alias grevertall='git reset --hard HEAD~1'
alias gun='git reset --hard HEAD'
alias gkilleverything='git reset --hard origin/$DEFAULT_BRANCH'
alias resetBranch='git fetch && git reset --hard origin/$DEFAULT_BRANCH'

# pushing and pulling
alias gpush='git push -u origin HEAD'
alias gpf='git push --force-with-lease'
alias gpa='git push --no-verify'
alias gp='pullremote'
alias gpr='git pull --rebase'
# rebase is saying, "instead of building my features on that old commit, build them all on this new commit"

alias grm='git fetch origin $DEFAULT_BRANCH:$DEFAULT_BRANCH && git rebase origin/$DEFAULT_BRANCH'

alias gf='git fetch --all --prune'
alias gpp='gp && gpush'
alias lint='node_modules/.bin/eslint --rulesdir grunt_tasks/eslint/rules'
alias grc='git rebase --continue'
# example grone slush_branch (takes one commit and plays it on top of slush branch)
alias grone='git rebase -i HEAD~1 --onto'

alias cleanMac="find . -name 'node_modules' -type d -exec rm -rf '{}' + && brewup"

#alias gclean='git remote prune origin && git fsck --full && git reflog expire --expire=now --all && git gc --prune=now && git clean -dfx && git stash clear && git branch -r | xargs -L 1 git branch -rD'

# ignore files
alias gignore="git update-index --assume-unchanged"
alias gstopignore="git update-index --no-assume-unchanged"

alias gcm='git checkout $DEFAULT_BRANCH'
alias gcmp='gcm && gpr'
alias gmp='gm && gpr'

# clean directory
alias gcl='git clean -fdx'

# branches
alias gbd='git branch -D'
alias gb='printBranches'
# rename a branch
alias gbn='git branch -m'
# New branch from master

alias createremote="createRemoteBranch"
alias deleteremote="deleteRemoteBranch"
alias killbranch="killBranch"
# alias pushremote="pushRemoteBranch"
# alias gpu="pushRemoteBranch"
alias pullremote="pullRemoteBranch"
alias gpl="pullRemoteBranch"
alias diffremote="diffRemoteBranch"
alias gs="git status" # upgrade your git if -sb breaks for you. it's fun.
alias seediff="git difftool $DEFAULT_BRANCH"

alias gremote='git remote set-url origin git@github.com/danieluhl/' # last param should be the github repo name.git - git@github.com/danieluhl/my_repo.git

alias gm='git merge'
alias gms='git merge --squash'
# git take theirs (follow with file path to take theirs on)
alias gtt='git checkout --theirs'
alias gmtheirs='git merge --strategy-option theirs'
alias gmours='git merge --strategy-option ours'

# diffing
alias gd='git diff --color | diff-so-fancy'
alias gds='git diff --staged --color | diff-so-fancy'
alias gdn="git diff --name-only $DEFAULT_BRANCH --color | diff-so-fancy | tee ~/git/patch/names.patch"
alias gdm="git diff $DEFAULT_BRANCH --color | diff-so-fancy"

# ********** non git ***********
alias la='ls -lAt'
alias ll='ls -alF'
alias ls='ls -G'
alias toucheverything='find . -exec touch {} \; &'

# open in sublime
alias subl='open -a Sublime\ Text '
alias stt='subl .'
alias pf='open -a "path finder" ./'

# open in vs code
# alias vtt='code ./'

alias nr="npm run"
alias n="npm"
alias pr="pnpm run"
alias p="pnpm"
alias br="bun run"
alias b="bun"
alias dr="deno run"
alias d="deno"

# call functions
alias deps="traceDependenciesByLeaf"

# run browser-sync
alias bs="browser-sync start --directory --server"

# traces all dependencies to see if they're there
function traceDependenciesByLeaf()
{
  eval "grunt deps --depth 1 --leaf $1"
}

function printBranches()
{
  eval 'for k in `git branch | sed s/^..//`; do echo -e `git log -1 --pretty=format:"%Cgreen%ci %Cred%cr%Creset" $k --`\\t"$k";done | sort'
}


# pushes the current branch to the same named remote
function pushRemoteBranch()
{
  currentBranch="$(git symbolic-ref HEAD 2>/dev/null)";
  currentBranch=${currentBranch##refs/heads/}
  eval "git push -u origin $currentBranch";
}

function setUpstreamBranch()
{
  currentBranch="$(git symbolic-ref HEAD 2>/dev/null)";
  currentBranch=${currentBranch##refs/heads/}
  eval "git branch --set-upstream-to=origin/$currentBranch $currentBranch"
}

function pullRemoteBranch()
{
  currentBranch="$(git symbolic-ref HEAD 2>/dev/null)";
  currentBranch=${currentBranch##refs/heads/}
  eval "git pull origin $currentBranch";
}

function diffRemoteBranch()
{
  currentBranch="$(git symbolic-ref HEAD 2>/dev/null)";
  currentBranch=${currentBranch##refs/heads/}
  repo=${PWD##*/}
  eval "git diff --full-index origin/$currentBranch" | tee ~/git/patch/$repo/$currentBranch.patch
}


alias gbm='getBranch'
function getBranch()
{
  eval "git fetch --prune origin $1:$1";
  eval "git merge $1 --no-edit";
}

# create a remote branch and set upstream
function createRemoteBranch()
{
  eval "git push -u origin $1:$1";
}

# delete a remote branch
function deleteRemoteBranch()
{
  eval "git push origin :$1";
}

function killBranch()
{
  eval "git branch -D $1";
  eval "git push origin :$1";
}

function deleteBranch()
{
  eval "git branch -D $1";
  eval "gb";
}

# requires "brew install fzf"
alias fbr="fuzzy_branch_search"
function fuzzy_branch_search() {
    local branches branch
    branches=$(git branch -a) &&
    branch=$(echo "$branches" | fzf +s +m -e) &&
    git checkout $(echo "$branch" | sed "s:.* remotes/origin/::" | sed "s:.* ::")
}

alias garo="addRemoteOrigin"
function addRemoteOrigin()
{
  repo=${PWD##*/}
  eval "git remote add origin git@github.com:danieluhl/$repo.git";
}

alias nginx-serve='cp . /usr/local/var/www/'

# Include custom aliases
[[ -f ~/.aliases.local ]] && source ~/.aliases.local

# opam (ocaml package manager) init
alias opamConfig='eval `opam config env`'

mkcd () { mkdir "$1" && cd $_ }

# debug node
alias ndebug="node --inspect --debug-brk"

# YARN
alias yilock="yarn --force --frozen-lockfile"

# kill adobe crap
alias noadobe="sudo -H killall ACCFinderSync \"Core Sync\" AdobeCRDaemon \"Adobe Creative\" AdobeIPCBroker node \"Adobe Desktop Service\" \"Adobe Crash Reporter\" && sudo -H rm -rf \"~/Library/LaunchAgents/com.adobe.AAM.Updater-1.0.plist\" \"~/Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist\" \"~/Library/LaunchDaemons/com.adobe.*.plist\""

# Docker aliases
alias dkkill='docker kill $(docker ps -q)'
alias dkstop='docker stop $(docker ps -q)'

# vim aliases
alias v="nvim ."
alias vim="nvim"
alias vimrc="nvim $DOTFILES_PATH/config/nvim"
alias remaps="nvim $DOTFILES_PATH/config/nvim/lua/duhl/remap.lua"

# python
alias pip="pip3"
alias py="python3"

# warp terminal background
# copy to ~/.warp/themes/night_owl
# set background image in the .yaml file

# rtx
# install whats in the config
# `rtx install node`
# set the global config
# `rtx global nodejs@latest`
# set the local config
# `rtx local nodejs@latest`
alias rtx="mise"
alias cc="codecrafters"

# eza replacement for ls
alias la='eza -al --git --icons --no-permissions --no-user -snew'
alias lt='eza -la --git --icons -T'
alias ll='eza -alF'
alias ls='eza -al --git --icons --no-permissions --no-user'
# ls latest
alias lsl='ls --sort=modified -r'

# Jujitsu
alias jst="jj st --no-pager"

# RA.Aid
alias ra="ra-aid"
alias gem="gemini"
alias oc="opencode"
alias ex="codex"

